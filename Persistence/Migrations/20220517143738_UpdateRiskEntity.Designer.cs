// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.EF;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220517143738_UpdateRiskEntity")]
    partial class UpdateRiskEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Entities.Assumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Assumptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c7ba364-c16a-454b-a325-a88af2c0640e"),
                            Description = "End users will be available to test during the time they agree to.",
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f")
                        },
                        new
                        {
                            Id = new Guid("7aeb7618-859a-4fb8-841d-de44920b7a1a"),
                            Description = "Project will follow agile methodology throughout execution.",
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Deliverable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeOfComplition")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Deliverables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f454ef57-8b35-499b-801a-fdf733c88a5f"),
                            Description = "Detailed description of project activities and their delivery process.",
                            IsDeleted = false,
                            MilestoneId = new Guid("e1969bcb-49eb-4d16-9d9e-50bd016516df"),
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            TimeOfComplition = new DateTime(2022, 5, 31, 14, 37, 36, 630, DateTimeKind.Utc).AddTicks(9103),
                            Title = "Project Plan"
                        },
                        new
                        {
                            Id = new Guid("edd2bd33-fb25-40ec-98ed-48b0adb4be7a"),
                            Description = "Web Application with full functionality described in documentation.",
                            IsDeleted = false,
                            MilestoneId = new Guid("f05dce1f-ba10-46a8-9266-9bdc8335520a"),
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            TimeOfComplition = new DateTime(2022, 12, 3, 14, 37, 36, 630, DateTimeKind.Utc).AddTicks(9124),
                            Title = "Web application"
                        },
                        new
                        {
                            Id = new Guid("657981a2-355e-4e26-a5c9-2b585cd4d8a4"),
                            Description = "Desktop Application with full functionality described in documentation.",
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            TimeOfComplition = new DateTime(2022, 12, 3, 14, 37, 36, 630, DateTimeKind.Utc).AddTicks(9131),
                            Title = "Desktop Application."
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DFD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevel")
                        .HasColumnType("int");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db366b85-04ef-4e28-9ef3-24a0174159f3"),
                            DFD = new DateTime(2022, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DOB = new DateTime(1997, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kate@gmail.com",
                            EnglishLevel = 2,
                            IsDeleted = false,
                            Name = "Kate",
                            Phone = "0996522354"
                        },
                        new
                        {
                            Id = new Guid("39ca7391-d752-402e-8ef6-0b255ebefa7f"),
                            DFD = new DateTime(2021, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DOB = new DateTime(2000, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yura@gmail.com",
                            EnglishLevel = 2,
                            IsDeleted = false,
                            Name = "Yura",
                            Phone = "0996844525"
                        },
                        new
                        {
                            Id = new Guid("1178ff11-3f8f-49d8-90bf-28090ea5c4fc"),
                            DFD = new DateTime(2020, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DOB = new DateTime(2000, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sveta@gmail.com",
                            EnglishLevel = 2,
                            IsDeleted = false,
                            Name = "Sveta",
                            Phone = "0996522147"
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<int>("Proficiency")
                        .HasColumnType("int");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SkillId");

                    b.ToTable("EmployeeSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dff84296-70a3-4071-903c-18404ca9a48c"),
                            EmployeeId = new Guid("db366b85-04ef-4e28-9ef3-24a0174159f3"),
                            IsDeleted = false,
                            Primary = true,
                            Proficiency = 1,
                            SkillId = new Guid("3b87c66f-9fd8-4ec6-8b36-f49e3f210e31")
                        },
                        new
                        {
                            Id = new Guid("28cd0dd0-5de1-4c1f-9685-e46fa4ae1764"),
                            EmployeeId = new Guid("39ca7391-d752-402e-8ef6-0b255ebefa7f"),
                            IsDeleted = false,
                            Primary = true,
                            Proficiency = 3,
                            SkillId = new Guid("3b87c66f-9fd8-4ec6-8b36-f49e3f210e31")
                        },
                        new
                        {
                            Id = new Guid("c041ad67-f04e-4e00-8e28-d14664453c74"),
                            EmployeeId = new Guid("39ca7391-d752-402e-8ef6-0b255ebefa7f"),
                            IsDeleted = false,
                            Primary = true,
                            Proficiency = 3,
                            SkillId = new Guid("be8ea9f3-640a-4079-a576-17836c78c82b")
                        },
                        new
                        {
                            Id = new Guid("d194e43e-0e1d-4b65-a1ac-61e8f9c03ada"),
                            EmployeeId = new Guid("1178ff11-3f8f-49d8-90bf-28090ea5c4fc"),
                            IsDeleted = false,
                            Primary = true,
                            Proficiency = 2,
                            SkillId = new Guid("e69515d6-7b4a-48f1-96f1-a431d4db9c6c")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1969bcb-49eb-4d16-9d9e-50bd016516df"),
                            Activity = "Project documentation approved",
                            DueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f")
                        },
                        new
                        {
                            Id = new Guid("f05dce1f-ba10-46a8-9266-9bdc8335520a"),
                            Activity = "Web version release",
                            DueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Objectives");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68bf002d-69f8-4d6d-8f15-6da8483767a2"),
                            Description = "Increase the number of website users to 100 in first three month",
                            IsDeleted = false,
                            Priority = 1,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f")
                        },
                        new
                        {
                            Id = new Guid("137edc09-5547-4eb0-8b60-ab4608cae052"),
                            Description = "Increase the number of clients to 5 in first month",
                            IsDeleted = false,
                            Priority = 0,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            Description = "Planmykids project that helps parents with building itineraries for kids to different camps.",
                            IsDeleted = false,
                            ManagerId = "4f555f12-9168-49b1-9f17-b87904564904"
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.ProjectCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EnglishLevel")
                        .HasColumnType("int");

                    b.Property<int>("ExternalRate")
                        .HasColumnType("int");

                    b.Property<double>("FTE")
                        .HasColumnType("float");

                    b.Property<int>("InternalRate")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Proficiency")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProjectCandidates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be1aa540-754b-4563-accb-b907fc1ae742"),
                            EnglishLevel = 3,
                            ExternalRate = 45,
                            FTE = 0.5,
                            InternalRate = 30,
                            IsDeleted = false,
                            Proficiency = 2,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            SkillId = new Guid("3b87c66f-9fd8-4ec6-8b36-f49e3f210e31")
                        },
                        new
                        {
                            Id = new Guid("be8ea9f3-640a-4079-a576-17836c78c82b"),
                            EnglishLevel = 3,
                            ExternalRate = 45,
                            FTE = 0.5,
                            InternalRate = 30,
                            IsDeleted = false,
                            Proficiency = 2,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            SkillId = new Guid("be8ea9f3-640a-4079-a576-17836c78c82b")
                        },
                        new
                        {
                            Id = new Guid("540d5334-8cf1-40ee-a88e-640b5e78dc2c"),
                            EnglishLevel = 3,
                            ExternalRate = 45,
                            FTE = 1.0,
                            InternalRate = 30,
                            IsDeleted = false,
                            Proficiency = 2,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            SkillId = new Guid("e69515d6-7b4a-48f1-96f1-a431d4db9c6c")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.ProjectRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RiskId");

                    b.ToTable("ProjectRisks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e3e1604-0724-4478-be33-71f9377779cf"),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            RiskId = new Guid("24b91b47-9e30-4080-b386-dd708f959de9")
                        },
                        new
                        {
                            Id = new Guid("1c6512a1-3017-44d2-9b31-fe433deaaf17"),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            RiskId = new Guid("f31a73d2-d48b-4ac3-95e4-af8e4ec9be39")
                        },
                        new
                        {
                            Id = new Guid("0d89c4cb-f48e-4584-bb83-bb51e6176c44"),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            RiskId = new Guid("d29a25cb-aa62-461e-baf9-2b382cfb5c1e")
                        },
                        new
                        {
                            Id = new Guid("68c64d92-3486-485b-8fbb-deab0c9dbbba"),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            RiskId = new Guid("d540c798-13ee-4eea-ba0b-01efa4b86326")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.ProjectStakeholder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StakeholderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StakeholderId");

                    b.ToTable("ProjectStakeholders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c32fee26-6fb9-4140-8354-db07140c6f28"),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            StakeholderId = new Guid("d0203d35-a1f3-4dda-bca6-f6da30177102")
                        },
                        new
                        {
                            Id = new Guid("dddada16-713b-4a0c-a6e5-5462304f4a18"),
                            IsDeleted = false,
                            ProjectId = new Guid("340cf520-35e7-47f3-ad61-5e15d705cb6f"),
                            StakeholderId = new Guid("d9b199e5-263e-4e59-bb38-9420f5acdfc0")
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Risk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Consequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Impact")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Likelihood")
                        .HasColumnType("int");

                    b.Property<string>("Mitigation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RiskCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RiskCategoryId");

                    b.ToTable("Risks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24b91b47-9e30-4080-b386-dd708f959de9"),
                            Impact = 3,
                            IsDeleted = false,
                            Level = 0,
                            Likelihood = 0,
                            Mitigation = "Identify stakeholders, analyze power and influence and create a stakeholder engagement plan. Project Board to authorise the plan. Revisit the plan at regular intervals to check all stakeholders are managed.",
                            RiskCategoryId = new Guid("6e11c76b-648a-4778-a11e-c21db56e7c52"),
                            Title = "Stakeholder action delays project"
                        },
                        new
                        {
                            Id = new Guid("f31a73d2-d48b-4ac3-95e4-af8e4ec9be39"),
                            Impact = 3,
                            IsDeleted = false,
                            Level = 0,
                            Likelihood = 0,
                            Mitigation = "Plan project team. Acknowledge problems to the HR team. Talk to other project managers whether their team members' fte is full.",
                            RiskCategoryId = new Guid("0124991d-1191-4914-afb7-02ab237dc2a6"),
                            Title = "Lack of resources"
                        },
                        new
                        {
                            Id = new Guid("d29a25cb-aa62-461e-baf9-2b382cfb5c1e"),
                            Impact = 3,
                            IsDeleted = false,
                            Level = 0,
                            Likelihood = 0,
                            Mitigation = "Write a communication plan. Identify stakeholders early and make sure they are considered in the communication plan. Use most appropriate channel of communication for audience",
                            RiskCategoryId = new Guid("3c4d64e1-fac2-4cc4-87fd-0186bec6429a"),
                            Title = "Lack of communication"
                        },
                        new
                        {
                            Id = new Guid("d540c798-13ee-4eea-ba0b-01efa4b86326"),
                            Impact = 3,
                            IsDeleted = false,
                            Level = 0,
                            Likelihood = 0,
                            Mitigation = "Attend project scheduling workshops.Document all assumptions made in planning and communicate to the project manager before project kick off.",
                            RiskCategoryId = new Guid("6d464351-efef-43db-9113-0b2de42ef20d"),
                            Title = "Unplanned work that must be accommodated"
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.RiskCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RiskCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94fd9fef-cbf0-4f34-a33c-dbb16b6b408f"),
                            IsDeleted = false,
                            Title = "Operational Risk"
                        },
                        new
                        {
                            Id = new Guid("072d2488-b193-4322-8132-dac1a5741a19"),
                            IsDeleted = false,
                            Title = "Budget Risk"
                        },
                        new
                        {
                            Id = new Guid("73723c0a-935d-46f0-a580-d05d17c20fc6"),
                            IsDeleted = false,
                            Title = "Schedule Risk"
                        },
                        new
                        {
                            Id = new Guid("77dbf4db-8b5c-4b5d-98e5-e8e4f9044713"),
                            IsDeleted = false,
                            Title = "Technical Solutions"
                        },
                        new
                        {
                            Id = new Guid("0124991d-1191-4914-afb7-02ab237dc2a6"),
                            IsDeleted = false,
                            Title = "Resource Risk"
                        },
                        new
                        {
                            Id = new Guid("6e11c76b-648a-4778-a11e-c21db56e7c52"),
                            IsDeleted = false,
                            Title = "Stakeholder Risk"
                        },
                        new
                        {
                            Id = new Guid("6d464351-efef-43db-9113-0b2de42ef20d"),
                            IsDeleted = false,
                            Title = "Scope and Requirements Risk"
                        },
                        new
                        {
                            Id = new Guid("3c4d64e1-fac2-4cc4-87fd-0186bec6429a"),
                            IsDeleted = false,
                            Title = "Communications and Decision Making"
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b87c66f-9fd8-4ec6-8b36-f49e3f210e31"),
                            IsDeleted = false,
                            Title = "React"
                        },
                        new
                        {
                            Id = new Guid("be8ea9f3-640a-4079-a576-17836c78c82b"),
                            IsDeleted = false,
                            Title = "Redux"
                        },
                        new
                        {
                            Id = new Guid("e69515d6-7b4a-48f1-96f1-a431d4db9c6c"),
                            IsDeleted = false,
                            Title = "C#"
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.Stakeholder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Engagement")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stakeholders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0203d35-a1f3-4dda-bca6-f6da30177102"),
                            Address = "Miami, Florida 92A",
                            Class = 1,
                            Email = "gil@test.com",
                            Engagement = 1,
                            IsDeleted = false,
                            Name = "Gil Spencor",
                            Payment = 1
                        },
                        new
                        {
                            Id = new Guid("d9b199e5-263e-4e59-bb38-9420f5acdfc0"),
                            Address = "Miami, Florida 92A",
                            Class = 0,
                            Email = "amanda@test.com",
                            Engagement = 0,
                            IsDeleted = false,
                            Name = "Amanda Froid",
                            Payment = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ae35acf-2c6b-4582-a549-e18f4c0e7849",
                            Email = "bob@text.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@TEXT.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "AQAAAAEAACcQAAAAEJoVoz8z097buEp8gA7S4wqZEKqETRjfbcW3IiDtd9h7o0KwumWl4cKRFuzrgsU3mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdf9b3dc-1fd7-4967-af75-d2dfb07467c3",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        },
                        new
                        {
                            Id = "4f555f12-9168-49b1-9f17-b87904564904",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0336dce6-7b38-4df5-8a6c-229e6ca78257",
                            Email = "jane@text.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE@TEXT.COM",
                            NormalizedUserName = "JANE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOY4DA9zDmG97yj3gI0UMZ4OQvqRVy3FCV9/sftaDhwm5DuTBWyklfbNcHw8NpXB6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00a90bd6-4cbb-4ade-b4ff-182a5f0c3e6d",
                            TwoFactorEnabled = false,
                            UserName = "jane"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "967e08ad-b71e-46e8-8e80-ffdce9ab9e74",
                            ConcurrencyStamp = "f35b9db7-c223-46b5-a604-c6c51b921795",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "09afe919-59ff-44b8-b656-c5e320c163a7",
                            ConcurrencyStamp = "210025c3-a098-420b-95bf-6a6ea78147ea",
                            Name = "Lead",
                            NormalizedName = "LEAD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4f555f12-9168-49b1-9f17-b87904564904",
                            RoleId = "967e08ad-b71e-46e8-8e80-ffdce9ab9e74"
                        },
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "09afe919-59ff-44b8-b656-c5e320c163a7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Entities.Assumption", b =>
                {
                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("Assumptions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Models.Entities.Deliverable", b =>
                {
                    b.HasOne("Domain.Models.Entities.Milestone", "Milestone")
                        .WithMany("Deliverables")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("Deliverables")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Models.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("Domain.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Models.Entities.Milestone", b =>
                {
                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Models.Entities.Objective", b =>
                {
                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("Objectives")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Models.Entities.Project", b =>
                {
                    b.HasOne("Domain.Models.Entities.User", "Manager")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Domain.Models.Entities.ProjectCandidate", b =>
                {
                    b.HasOne("Domain.Models.Entities.Employee", "Employee")
                        .WithMany("Candidates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("Candidates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.Skill", "Skill")
                        .WithMany("Candidates")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Models.Entities.ProjectRisk", b =>
                {
                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("ProjectRisks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.Risk", "Risk")
                        .WithMany("ProjectRisks")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("Domain.Models.Entities.ProjectStakeholder", b =>
                {
                    b.HasOne("Domain.Models.Entities.Project", "Project")
                        .WithMany("ProjectStakeholders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.Stakeholder", "Stakeholder")
                        .WithMany("ProjectStakeholders")
                        .HasForeignKey("StakeholderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Stakeholder");
                });

            modelBuilder.Entity("Domain.Models.Entities.Risk", b =>
                {
                    b.HasOne("Domain.Models.Entities.RiskCategory", "RiskCategory")
                        .WithMany("Risks")
                        .HasForeignKey("RiskCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RiskCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Entities.Employee", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("EmployeeSkills");
                });

            modelBuilder.Entity("Domain.Models.Entities.Milestone", b =>
                {
                    b.Navigation("Deliverables");
                });

            modelBuilder.Entity("Domain.Models.Entities.Project", b =>
                {
                    b.Navigation("Assumptions");

                    b.Navigation("Candidates");

                    b.Navigation("Deliverables");

                    b.Navigation("Milestones");

                    b.Navigation("Objectives");

                    b.Navigation("ProjectRisks");

                    b.Navigation("ProjectStakeholders");
                });

            modelBuilder.Entity("Domain.Models.Entities.Risk", b =>
                {
                    b.Navigation("ProjectRisks");
                });

            modelBuilder.Entity("Domain.Models.Entities.RiskCategory", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("Domain.Models.Entities.Skill", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("EmployeeSkills");
                });

            modelBuilder.Entity("Domain.Models.Entities.Stakeholder", b =>
                {
                    b.Navigation("ProjectStakeholders");
                });

            modelBuilder.Entity("Domain.Models.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
